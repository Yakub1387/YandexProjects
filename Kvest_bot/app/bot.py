'''
–ë—É—á–º–∏–Ω—Å–∫–∏–π –Ø–∫—É–±, Beta-–≥—Ä—É–ø–ø–∞
*API_KEY –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ .env
'''

import telebot, os, json
from telebot import types
from random import choice
from info import get_data, push_data
from pathlib import Path
from dotenv import load_dotenv
from random import choice

BASE_DIR = Path(__file__).parent.parent

load_dotenv(BASE_DIR / '.env')
API_KEY = os.getenv('API_KEY')
data = get_data()
bot = telebot.TeleBot(API_KEY)

with open('quest.json', encoding='utf-8') as f: QUEST = json.load(f)


def closer(a):
    for i in a:
        i.close()


def tracker(call: types.CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'cont')
    button2 = types.InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='again')
    markup.add(button1, button2)
    bot.send_message(call.message.chat.id, text='–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –∫–≤–µ—Å—Ç –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', reply_markup=markup)


def cont(call: types.CallbackQuery):
    call.data = data[str(call.from_user.id)][0]
    quest(call)


def again(call: types.CallbackQuery):
    call.data = 'Forest'
    quest(call)


def check_quest(a: types.CallbackQuery):
    if isinstance(a, types.CallbackQuery):
        if a.data == 'quest':
            if str(a.from_user.id) not in data.keys():
                data[str(a.from_user.id)] = ('Forest', False)
                push_data(data)
                return True
            elif data[str(a.from_user.id)][1]:
                data[str(a.from_user.id)] = (data[str(a.from_user.id)][0], False)
                push_data(data)
                return True
            else:
                markup = types.InlineKeyboardMarkup(row_width=1)
                button1 = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ', callback_data='again')
                markup.add(button1)
                bot.send_message(a.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–≤–µ—Å—Ç –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π!', reply_markup=markup)
                return False


def quest_handler(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data='quest')
    button2 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    markup.add(button1, button2)
    bot.send_message(message.chat.id,
                     text='<i>–í—ã –∑–∞—Å—Ç—Ä—è–ª–∏ –≤ –≥—É—Å—Ç–æ–º, –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º–æ–º –ª–µ—Å—É –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Å—Ä–µ–¥—Å—Ç–≤ –∫ –≤—ã–∂–∏–≤–∞–Ω–∏—é –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç–æ–º, –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏...</i>\n<b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?</b>', reply_markup=markup, parse_mode='HTML')


def quest(call: types.CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    img = QUEST[call.data]['img']
    if not isinstance(img, list):
        img = [img, ]
    img = [open(i, 'rb') for i in img]
    if not call.data == 'Forest':
        data[str(call.from_user.id)] = (call.data, False)
        push_data(data)
        img = [choice(img), ]
    to_send = [types.InputMediaPhoto(i) for i in img]
    if 'options' in QUEST[call.data].keys():
        for i in QUEST[call.data]['options']:
            if isinstance(i['calling'], list):
                cb = choice(i['calling'])
            else:
                cb = i['calling']
            markup.add(types.InlineKeyboardButton(i['description'], callback_data=cb))
        bot.send_media_group(call.message.chat.id, to_send)
        bot.send_message(call.message.chat.id, text=QUEST[call.data]['text'], reply_markup=markup)
        closer(img)
    else:
        img = choice(img)
        bot.send_media_group(call.message.chat.id, to_send)
        button1 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back')
        button2 = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='Forest')
        markup.add(button1, button2)
        bot.send_message(call.message.chat.id, text=QUEST[call.data]['text'], reply_markup=markup)
        bot.send_message(call.message.chat.id, text=QUEST[call.data]['ending'])
        closer(img)
        data[str(call.from_user.id)] = (call.data, True)
        push_data(data)


def begin_handler(call: types.CallbackQuery, bot: telebot.TeleBot):
    if isinstance(call, types.CallbackQuery):
        bot.delete_message(call.message.chat.id, call.message.id)
        call = call.message
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.InlineKeyboardButton("üëã")
    button3 = types.InlineKeyboardButton("–ù–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω???")
    button4 = types.InlineKeyboardButton("/help")
    button5 = types.InlineKeyboardButton('/quest')
    markup.add(button1, button3, button4, button5)
    if call.from_user.is_bot:
        bot.send_message(call.chat.id, text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç", reply_markup=markup)
    else:
        bot.send_message(call.chat.id, text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç".format(call.from_user.full_name), reply_markup=markup)


def helping_handler(message: types.Message, bot: telebot.TeleBot):
    bot.send_message(message.chat.id, text='–í –í–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–π <i>–±–æ—Ç</i> –∏ –∫–Ω–æ–ø–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤–∫–ª—é—á–∞—è –∫–≤–µ—Å—Ç), —Ç–æ –µ—Å—Ç—å –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã <b>–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>; –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –µ–≥–æ –∑–∞–ø–∏—à—É –≤ —Ñ–∞–π–ª.', parse_mode="HTML")


def what_handler(message: types.Message, bot: telebot.TeleBot):
    var = ['–ù—É –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...', "–ü—Ä–æ—Å—Ç–æ –±–µ–∑ —Å–ª–æ–≤", "–ë–µ–∑ –ø–æ–Ω—è—Ç–∏—è", "–î–∞-–¥–∞...", "–ü–æ—á–µ–º—É?", "–ù–∞–≤–µ—Ä–Ω–æ",
           "–Ø –Ω–µ –º–µ—Å—Ç–Ω—ã–π", "–≠—Ç–æ –Ω–µ –∫–æ –º–Ω–µ", "–ù–∞ —Ç–æ –µ—Å—Ç—å GPT...", "???", "–Ø –æ—á–µ–Ω—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π", "–î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å...",
           "–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞", "–ß–∏—Å–ª–æ '–ø–∏' ‚âà 3,1415926535", '–ù–µ—Ç', "–ù–µ –∑–Ω–∞—é", "–ù–∏—á–µ–º –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å...", "–Ø –Ω–µ —É–º–µ—é –¥—É–º–∞—Ç—å, –µ—Å–ª–∏ —á—Ç–æ"]
    bot.send_message(message.chat.id, text=choice(var))


def get_voice_handler(message: types.Message, bot: telebot.TeleBot):
    voice = bot.get_file(message.voice.file_id)
    file = bot.download_file(voice.file_path)
    with open('media/the_voices.ogg', 'wb') as new_file:
        new_file.write(file)


def main_handler(message: types.Message, bot: telebot.TeleBot):
    if (message.text == "üëã"):
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ–µ—Ç, {}".format(message.from_user.first_name))

    elif (message.text.lower() == "–Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω???"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.InlineKeyboardButton("–¢—ã –∫—Ç–æ?")
        btn2 = types.InlineKeyboardButton("–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?")
        back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)
    elif (message.text.lower() == "—Ç—ã –∫—Ç–æ?"):
        img = open('media/tree.jpg', 'rb')
        bot.send_photo(message.chat.id, photo=img, caption='–ê –≤–æ—Ç –∏ —è')
        bot.send_message(message.chat.id, "–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ, <b>–º—É–¥—Ä—ã–π –¥—É–±</b> –∏–∑ '–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞' –∏ —Ç–¥ - —É –º–µ–Ω—è –º–Ω–æ–≥–æ –∏–º—ë–Ω", parse_mode='HTML')
        img.close()


    elif message.text.lower() == "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?":
        bot.send_message(message.chat.id, text="–í–°–Å")

    elif (message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.InlineKeyboardButton("üëã")
        button3 = types.InlineKeyboardButton("–ù–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω???")
        button4 = types.InlineKeyboardButton("/help")
        button5 = types.InlineKeyboardButton('/quest')
        markup.add(button1, button3, button4, button5)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)

    else:
        what_handler(message, bot)


def register_handlers(bot: telebot.TeleBot):
    """–§—É–Ω–∫—É—Ü–∏—è —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–µ–ª—ã"""
    bot.register_callback_query_handler(begin_handler, func=lambda call: call.data == 'back', pass_bot=True)
    bot.register_message_handler(begin_handler, content_types=['text'], commands=['start'], pass_bot=True)
    bot.register_message_handler(helping_handler, content_types=['text'], commands=['help'], pass_bot=True)
    bot.register_message_handler(quest_handler, content_types=['text'], commands=['quest'])
    bot.register_callback_query_handler(tracker, func=check_quest)
    bot.register_callback_query_handler(cont, func=lambda call: call.data == 'cont')
    bot.register_callback_query_handler(again, func=lambda call: call.data == 'again')
    bot.register_callback_query_handler(quest, func=lambda call: call.data in QUEST.keys())
    bot.register_message_handler(get_voice_handler, content_types=['voice'], pass_bot=True)
    bot.register_message_handler(main_handler, content_types=['text'], pass_bot=True)


register_handlers(bot)
bot.polling()

'''
–ë—É—á–º–∏–Ω—Å–∫–∏–π –Ø–∫—É–±, 32 –≥—Ä—É–ø–ø–∞
*API_KEY –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ .env
'''

import telebot, os
from telebot import types
from random import choice
from info import SURVEY, get_data, push_data
from pathlib import Path
from dotenv import load_dotenv

BASE_DIR = Path(__file__).parent.parent

load_dotenv(BASE_DIR / '.env')  # take environment variables from .env.
API_KEY = os.getenv('API_KEY')
f = True
data = get_data()
bot = telebot.TeleBot(API_KEY)


def step(call: types.CallbackQuery):
    a = data[str(call.message.from_user.id)]
    if len(a) < 3:
        call.data = a[-1]
        a = a[:-1]
        [survey_second, survey_third][len(a) - 1](call)
    else:
        call.data = ''
        data[str(call.message.from_user.id)] = ''
        push_data(data)
        survey_first(call)


def cont(call: types.CallbackQuery):
    if str(call.message.from_user.id) in list(data.keys()):
        if len(data[str(call.message.from_user.id)]) != 0:
            markup = types.InlineKeyboardMarkup(row_width=1)
            button1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'cont')
            button2 = types.InlineKeyboardButton("–ó–∞–Ω–æ–≤–æ", callback_data='again')
            markup.add(button1, button2)
            bot.send_message(call.message.chat.id, text='–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', reply_markup=markup)
        else:
            call.data = ''
            survey_first(call)
    else:
        data[str(call.message.from_user.id)] = ''
        call.data = ''
        survey_first(call)


def closer(message, a):
    for i in a:
        i.seek(0)


def check_survey(a: types.CallbackQuery):
    global data, f
    if isinstance(a, types.CallbackQuery):

        if a.data == 'func':
            if f:
                f = False
                return True
            else:
                bot.send_message(a.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ—Å—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π!')
                return False


def survey_first(call: types.CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_message(call.message.chat.id, text='–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É ')
    markup = types.InlineKeyboardMarkup(row_width=1)
    text = SURVEY['first']['answers']
    button1 = types.InlineKeyboardButton(text[0], callback_data='1_0')
    button2 = types.InlineKeyboardButton(text[1], callback_data='1_1')
    markup.add(button1, button2)
    bot.send_message(call.message.chat.id, text=f'<b><i>{SURVEY["first"]["question"]}</i></b>', reply_markup=markup, parse_mode='HTML')


def survey_second(call: types.CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.id)
    data[str(call.message.from_user.id)] += call.data[-1]
    push_data(data)
    markup = types.InlineKeyboardMarkup(row_width=1)
    text = SURVEY['second']['answers']
    button1 = types.InlineKeyboardButton(text[0], callback_data='2_0')
    button2 = types.InlineKeyboardButton(text[1], callback_data='2_1')
    button3 = types.InlineKeyboardButton(text[2], callback_data='2_2')
    markup.add(button1, button2, button3)
    bot.send_message(call.message.chat.id, text=f'<b><i>{SURVEY["second"]["question"]}</i></b>', reply_markup=markup, parse_mode='HTML')


def survey_third(call: types.CallbackQuery):
    bot.delete_message(call.message.chat.id, call.message.id)
    data[str(call.message.from_user.id)] += call.data[-1]
    push_data(data)
    markup = types.InlineKeyboardMarkup(row_width=1)
    text = SURVEY['third']['answers']
    button1 = types.InlineKeyboardButton(text[0], callback_data='3_0')
    button2 = types.InlineKeyboardButton(text[1], callback_data='3_1')
    markup.add(button1, button2)
    bot.send_message(call.message.chat.id, text=f'<b><i>{SURVEY["third"]["question"]}</i></b>', reply_markup=markup, parse_mode='HTML')


def survey_ending(call: types.CallbackQuery):
    global f
    bot.delete_message(call.message.chat.id, call.message.id)
    data[str(call.message.from_user.id)] += call.data[-1]
    staff = SURVEY['choose'][data[str(call.message.from_user.id)]]
    to_send = [types.InputMediaPhoto(staff[i]) if i != (len(staff) - 1) else types.InputMediaPhoto(staff[i], f'<i>{staff[0]}</i>', parse_mode='HTML') for i in range(1, len(staff))]
    bot.send_media_group(call.message.chat.id, to_send)
    f = True
    data[str(call.message.from_user.id)] = ''
    push_data(data)
    closer(call.message, staff[1:])


def begin_handler(call: types.CallbackQuery, bot: telebot.TeleBot):
    if isinstance(call, types.CallbackQuery):
        bot.delete_message(call.message.chat.id, call.message.id)
        call = call.message
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.InlineKeyboardButton("üëã")
    button2 = types.InlineKeyboardButton('–ê–Ω–∫–µ—Ç–∞')
    button3 = types.InlineKeyboardButton("–ù–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω???")
    button4 = types.InlineKeyboardButton("/help")
    markup.add(button1, button2, button3, button4)
    bot.send_message(call.chat.id,
                     text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}! –Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç".format(
                         call.from_user.full_name), reply_markup=markup)


def helping_handler(message: types.Message, bot: telebot.TeleBot):
    bot.send_message(message.chat.id, text='–í –í–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–π <i>–±–æ—Ç</i> –∏ –∫–Ω–æ–ø–∫–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ç–æ –µ—Å—Ç—å –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã <b>–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>; –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –µ–≥–æ –∑–∞–ø–∏—à—É –≤ —Ñ–∞–π–ª.', parse_mode="HTML")


def what_handler(message: types.Message, bot: telebot.TeleBot):
    var = ['–ù—É –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...', "–ü—Ä–æ—Å—Ç–æ –±–µ–∑ —Å–ª–æ–≤", "–ë–µ–∑ –ø–æ–Ω—è—Ç–∏—è", "–î–∞-–¥–∞...", "–ü–æ—á–µ–º—É?", "–ù–∞–≤–µ—Ä–Ω–æ",
           "–Ø –Ω–µ –º–µ—Å—Ç–Ω—ã–π", "–≠—Ç–æ –Ω–µ –∫–æ –º–Ω–µ", "–ù–∞ —Ç–æ –µ—Å—Ç—å GPT...", "???", "–Ø –æ—á–µ–Ω—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π", "–î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å...",
           "–≠—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è —Ñ—Ä–∞–∑–∞", "–ß–∏—Å–ª–æ '–ø–∏' ‚âà 3,1415926535", '–ù–µ—Ç', "–ù–µ –∑–Ω–∞—é", "–ù–∏—á–µ–º –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å..."]
    bot.send_message(message.chat.id, text=choice(var))


def get_voice_handler(message: types.Message, bot: telebot.TeleBot):
    voice = bot.get_file(message.voice.file_id)
    file = bot.download_file(voice.file_path)
    with open('media/the_voices.ogg', 'wb') as new_file:
        new_file.write(file)


def main_handler(message: types.Message, bot: telebot.TeleBot):
    if (message.text == "üëã"):
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ–µ—Ç, {}".format(message.from_user.first_name))
    elif (message.text.lower() == "–Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω???"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.InlineKeyboardButton("–¢—ã –∫—Ç–æ?")
        btn2 = types.InlineKeyboardButton("–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?")
        back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

    elif (message.text.lower() == "—Ç—ã –∫—Ç–æ?"):
        bot.send_photo(message.chat.id, photo=open('media/tree.jpg', 'rb'), caption='–ê –≤–æ—Ç –∏ —è')
        bot.send_message(message.chat.id, "–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ, <b>–º—É–¥—Ä—ã–π –¥—É–±</b> –∏–∑ '–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞' –∏ —Ç–¥ - —É –º–µ–Ω—è –º–Ω–æ–≥–æ –∏–º—ë–Ω", parse_mode='HTML')

    elif message.text.lower() == "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?":
        bot.send_message(message.chat.id, text="–í–°–Å")

    elif (message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.InlineKeyboardButton("üëã")
        button2 = types.InlineKeyboardButton('–ê–Ω–∫–µ—Ç–∞')
        button3 = types.InlineKeyboardButton("–ù–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω???")
        button4 = types.InlineKeyboardButton("/help")
        markup.add(button1, button2, button3, button4)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)
    elif (message.text.lower() == '–∞–Ω–∫–µ—Ç–∞'):
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='func')
        button2 = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨ÖÔ∏è', callback_data='back')
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text='–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–µ,\n–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –í–∞–º —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º', reply_markup=markup)
    else:
        what_handler(message, bot)


def register_handlers(bot: telebot.TeleBot):
    """–§—É–Ω–∫—É—Ü–∏—è —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–µ–ª—ã"""
    bot.register_callback_query_handler(begin_handler, func=lambda call: call.data == 'back', pass_bot=True)
    bot.register_callback_query_handler(cont, func=check_survey)
    bot.register_callback_query_handler(step, func=lambda call: call.data == 'cont')
    bot.register_callback_query_handler(survey_first, func=lambda call: call.data == 'again')
    bot.register_callback_query_handler(survey_second, func=lambda call: call.data[0] == '1')
    bot.register_callback_query_handler(survey_third, func=lambda call: call.data[0] == '2')
    bot.register_callback_query_handler(survey_ending, func=lambda call: call.data[0] == '3')
    bot.register_message_handler(begin_handler, content_types=['text'], commands=['start'], pass_bot=True)
    bot.register_message_handler(helping_handler, content_types=['text'], commands=['help'], pass_bot=True)
    bot.register_message_handler(get_voice_handler, content_types=['voice'], pass_bot=True)
    bot.register_message_handler(main_handler, content_types=['text'], pass_bot=True)



register_handlers(bot)
bot.polling()
